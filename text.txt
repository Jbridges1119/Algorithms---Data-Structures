

-- maxChars --
Access object value using for loop with [] not . notation
for (let letter of str) 
letterCount[letter]
#This tripped me up - it's a string value returned from the loop so it needs to be in square brackets

-- fizzbuzz --
switch statements are meant to be true - don't need a value fed into it
Original - `switch (i)` - Wrong
New - `switch (true)` - Right
#Tripped me up. Had it all right except I was just feeding a variable into the switch statement instead of true

-- anagrams --
using a helper function to reduce repeated code
familiarity with "Object.keys" helps with this problem
#my way worked but his way is waaay better - his second way is pretty simple

-- capitalize --
being familiar with splice and slice would be really helpful with this question
#I got it but it took me a few console logs to know what slice/splice is doing

-- steps --
used .repeat(n);
allowed me to repeat the spaces n times and then I can manipulate that.

-- pyramid --
Recursive - I got got on the intitalizing pyra array. I was reseting it everytime it started untill I push the step == 0 conditional.

-- vowels --
.includes(n) works on strings

-- matrix -- *important*
Was really tough.
Found it easiest to break it up into 2 halfs - going up - going down.
first attempt had repeating code but a little easier to follow through code
second attemp I tried to reduce repeating code. A little harder to read through

-- fib -- *important*
fibOne - Mixed up the n count when using as length in conditional and arr index. Made me forget to put '<='.
fibTwo - must know fib(0) returns 0, fib(1) returns 1 
       - reduces down to all fib(1) and fib(0), then adds them all up to give answer. 
       - doesn't need an array to carry out
       - really bad runtime (2^n) 
fibThree - This is how you improve it.
         - Called 'memoization'
         - we run are slow fibTwo function through a memorize function that stores they args and results as    key:value pairs. 
         - If we see the same args again we can return the stored value.
         - .apply() - Invokes function it's called on and takes an array as its second argument and passes the members of that array as arguments.